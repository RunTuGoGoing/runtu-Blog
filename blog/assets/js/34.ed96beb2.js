(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{459:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("js 执行机制是从上至下一条条执行，遇到异步代码会放到消息队列里面，然后再往下走。异步不会进入到主进程，而进入消息队列的任务，只有任务队列通知主进程，该任务可以执行了才会被放到主进程里面。其中异步任务又分为微任务，宏任务，微任务就可以看作是比较紧急的事务，优先级始终比宏任务高。每次微任务执行完毕之后才回去执行宏任务。然后执行完当前的宏任务后会再折返回去看有没有微任务，如果有微任务那么就去执行微任务。当微任务执行完毕之后再去执行下一条宏任务，如此以往就形成了事件循环 Event")]),t._v(" "),s("h2",{attrs:{id:"loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loop"}},[t._v("#")]),t._v(" Loop")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//宏任务：")]),t._v("\nsetTimeout，setInterval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//微任务")]),t._v("\nPromise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("then catch "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("其中 async 属于 promise 的语法糖，await 的前面的代码属于同步，而 await 后面的代码则相当于 then，所以 await 后面的代码则是微任务。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);