(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{457:function(s,t,n){"use strict";n.r(t);var a=n(1),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"js中的内存机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js中的内存机制"}},[s._v("#")]),s._v(" js中的内存机制")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/hb13141029/article/details/127819232",target:"_blank",rel:"noopener noreferrer"}},[s._v("js栈内存和堆内存详解—图解基本数据类型和引用数据类型的区别"),t("OutboundLink")],1),t("br")]),s._v(" "),t("p",[s._v("堆栈这种数据结构，具有先进后出，后进先出的特点，先明细几个概念：")]),s._v(" "),t("ul",[t("li",[s._v("栈内存： 计算机为浏览器执行js代码，在内部开辟的空间，也被称为执行环境栈。里面存放的是基本数据类型以及对象类型数据的引用地址，地址指向了堆内存里的对象内容。由于栈内存中存放的基础数据类型的大小是固定的，所以栈内存的内存都是操作系统自动分配和释放回收的。")]),s._v(" "),t("li",[s._v("堆内存: 堆内存里存放的是除函数的引用类型的值，如数组和对象。由于堆内存所存大小不固定，系统无法自动释放回收，所以需要JS引擎来手动释放这些内存")]),s._v(" "),t("li",[s._v("执行上下文： 大致分为三类\n"),t("ul",[t("li",[s._v("全局执行上下文，有一个全局对象window")]),s._v(" "),t("li",[s._v("函数级上下文：任何一个函数都有自己特有的执行上下文(函数里面的区域可以访问到函数外部的变量，但是函数外部的区域，是访问不到函数里面的)")]),s._v(" "),t("li",[s._v("块级上下文： 由let或者const加一个{}所组成的区域，就是一个块级上下文(括号区域外是无法访问到括号区域里面声明的let或者const变量的，但是可以访问到括号区域里面的var变量)")])])]),s._v(" "),t("li",[s._v("变量对象：存储某个区块代码里声明的值和变量")]),s._v(" "),t("li",[s._v("真实JS变量在堆栈中的存储：")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xiaoming'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("原始类型的值会直接存储在上下文中，而上下文则存储在栈内存中"),t("br"),s._v("\n引用类型的值实际上会被存储在堆内存中，每一个值都对应着一个地址，然后在栈内存的执行上下文中将变量的值赋值成对应的地址。")]),s._v(" "),t("ul",[t("li",[s._v("栈和堆的溢出：\n"),t("ul",[t("li",[s._v("栈：当递归调用方法时，随着栈深度的增加，JVM维持着一条长长的方法调用轨迹，直到内存不够分配，产生栈溢出。")]),s._v(" "),t("li",[s._v("堆：循环创建对象，通俗点就是不断的new一个对象。")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);